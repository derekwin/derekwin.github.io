<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://derekwin.github.io</id>
    <title>SECLEE</title>
    <updated>2020-04-01T13:48:58.738Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://derekwin.github.io"/>
    <link rel="self" href="https://derekwin.github.io/atom.xml"/>
    <subtitle>为了专心写东西</subtitle>
    <logo>https://derekwin.github.io/images/avatar.png</logo>
    <icon>https://derekwin.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, SECLEE</rights>
    <entry>
        <title type="html"><![CDATA[一个设想]]></title>
        <id>https://derekwin.github.io/post/yi-ge-she-xiang/</id>
        <link href="https://derekwin.github.io/post/yi-ge-she-xiang/">
        </link>
        <updated>2020-04-01T10:04:37.000Z</updated>
        <content type="html"><![CDATA[<p><strong>想法最初来源是用python开发一个音乐宿主软件</strong></p>
<ul>
<li><mark>怎么构建应用？</mark></li>
</ul>
<p>最先想到的就是python的强大的web框架搭配nodejs前端框架。好像很多宿主软件都大量的采用了js做本地界面，也有一些大型应用在使用js开发。</p>
<ul>
<li><mark>怎么选择后端框架？</mark></li>
</ul>
<p>由于软件是运行在本地的，所以大可不必过分考虑web安全中的那些风险，所以选择框架的首要要求是性能和可扩展性，目前来说，我很喜欢flask的轻量和django的可拔插属性。<br>
我觉得做软件需要的是一个像django一样的可以很方便的模块化拔插，但是又像flask一样，不那么臃肿（相对于开发应用），或者是专为了本地应用设计的一套模块。<br>
可拔插属性很重要，因为在音乐制作的过程中，插件的拔插也是这样的形式。</p>
<p>所以，开发一个类似web框架实现的应用程序内核？在该内核的基础上引入jit属性，或者是 直接选择pypy作为主力语言（分析会丢失大量python库的支持），可以参考学习一下chrome nodejs内核</p>
<ul>
<li><mark>怎么选择前端，界面？</mark></li>
</ul>
<p>由于软件是运行在本地，所以大可不必考虑轻量这个问题，目前看硬盘读取速度是远大于网络速度的。<br>
之前使用过quasar这样的全端通用的框架，而且需要了解一下flutter这个谷歌框架，如果可行，参照quasar这个框架的效果，实现对我们那个 ‘web框架应用程序内核’内建一套前端框架，但是要开放他的可扩展性，基础的框架最好只实现基本的结构模块，具体的美化接口一定要开出来。</p>
<p>所以综上，需要实现一个类似于django和quasar的集合体的，但是专注于本地应用构建的框架，可以理解为程序内核，对了，这个内核需要一个浏览器一样的东西，暂定chrome内核。</p>
<p>这样，就可以单纯利用python和js,css构建一个复杂的桌面应用，而且我希望他是跨平台的。</p>
<ul>
<li><mark>音频处理的插件，dsp api</mark></li>
</ul>
<p>python目前的音频处理库真的很少，这很反常，python有如此强的计算库，numpy等等，实现音频的处理应该是远远强大于其他语言的</p>
<p>基于基础的音频处理c++的库，利用py构建一个底层的处理库，类似于abletonlive中内嵌的Max，，有了这个模块化的库，就可以轻松实现 模块合成器 的效果</p>
<p>maybe 会构筑一个 区别于的 stegbin的 vst通用接口的新接口</p>
<p><strong><mark>一个开源的宿主软件！！！是否有可能呢？</mark></strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GPIO.orangepioneplus]]></title>
        <id>https://derekwin.github.io/post/gpioorangepioneplus/</id>
        <link href="https://derekwin.github.io/post/gpioorangepioneplus/">
        </link>
        <updated>2020-03-31T04:11:42.000Z</updated>
        <content type="html"><![CDATA[<h4 id="引脚信息">引脚信息</h4>
<p>26-pin - from wiki</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">3.3V</td>
<td style="text-align:center">2</td>
<td style="text-align:center">5V</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">PB21</td>
<td style="text-align:center">TWI2-SDA</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">PB20</td>
<td style="text-align:center">TWI2-SCK</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">PI3</td>
<td style="text-align:center">PWM1</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">GND</td>
<td style="text-align:center">10</td>
<td style="text-align:center">PH1</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">PI19</td>
<td style="text-align:center">UART2_RX</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center">PI18</td>
<td style="text-align:center">UART2_TX</td>
<td style="text-align:center">14</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">PI17</td>
<td style="text-align:center">UART2_CTS</td>
<td style="text-align:center">16</td>
</tr>
<tr>
<td style="text-align:center">17</td>
<td style="text-align:center">3.3V</td>
<td style="text-align:center">18</td>
<td style="text-align:center">PH21</td>
</tr>
<tr>
<td style="text-align:center">19</td>
<td style="text-align:center">PI12</td>
<td style="text-align:center">SPI0_MOSI</td>
<td style="text-align:center">20</td>
</tr>
<tr>
<td style="text-align:center">21</td>
<td style="text-align:center">PI13</td>
<td style="text-align:center">SPI0_MISO</td>
<td style="text-align:center">22</td>
</tr>
<tr>
<td style="text-align:center">23</td>
<td style="text-align:center">PI11</td>
<td style="text-align:center">SPI0_CLK</td>
<td style="text-align:center">24	PI10</td>
</tr>
<tr>
<td style="text-align:center">25</td>
<td style="text-align:center">GND</td>
<td style="text-align:center">26</td>
<td style="text-align:center">PI14</td>
</tr>
</tbody>
</table>
<p>官方手册</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">con12-p01</td>
<td style="text-align:center">VCC-3.3V</td>
<td style="text-align:center">VCC-IO</td>
</tr>
<tr>
<td style="text-align:center">con12-p02</td>
<td style="text-align:center">VCC-5V</td>
<td style="text-align:center">DCIN</td>
</tr>
<tr>
<td style="text-align:center">con12-p03</td>
<td style="text-align:center">TWI1-SDA</td>
<td style="text-align:center">PH06</td>
</tr>
<tr>
<td style="text-align:center">con12-p04</td>
<td style="text-align:center">VCC-5V</td>
<td style="text-align:center">DCIN</td>
</tr>
<tr>
<td style="text-align:center">con12-p05</td>
<td style="text-align:center">TWI1-SCK</td>
<td style="text-align:center">PH05</td>
</tr>
<tr>
<td style="text-align:center">con12-p06</td>
<td style="text-align:center">GND</td>
<td style="text-align:center">GND</td>
</tr>
<tr>
<td style="text-align:center">con12-p07</td>
<td style="text-align:center">PWM1</td>
<td style="text-align:center">PK04</td>
</tr>
<tr>
<td style="text-align:center">con12-p08</td>
<td style="text-align:center">PD21</td>
<td style="text-align:center">PD21</td>
</tr>
<tr>
<td style="text-align:center">con12-p09</td>
<td style="text-align:center">GND</td>
<td style="text-align:center">GND</td>
</tr>
<tr>
<td style="text-align:center">con12-p10</td>
<td style="text-align:center">PD22</td>
<td style="text-align:center">PD22</td>
</tr>
<tr>
<td style="text-align:center">con12-p11</td>
<td style="text-align:center">UART3_RX</td>
<td style="text-align:center">PD24</td>
</tr>
<tr>
<td style="text-align:center">con12-p12</td>
<td style="text-align:center">PC09</td>
<td style="text-align:center">PC09</td>
</tr>
<tr>
<td style="text-align:center">con12-p13</td>
<td style="text-align:center">UART3_TX</td>
<td style="text-align:center">PD23</td>
</tr>
<tr>
<td style="text-align:center">con12-p14</td>
<td style="text-align:center">GND</td>
<td style="text-align:center">GND</td>
</tr>
<tr>
<td style="text-align:center">con12-p15</td>
<td style="text-align:center">UART3_CTS</td>
<td style="text-align:center">PD26</td>
</tr>
<tr>
<td style="text-align:center">con12-p16</td>
<td style="text-align:center">PC08</td>
<td style="text-align:center">PC08</td>
</tr>
<tr>
<td style="text-align:center">con12-p17</td>
<td style="text-align:center">VCC-3.3V</td>
<td style="text-align:center">VCC-IO</td>
</tr>
<tr>
<td style="text-align:center">con12-p18</td>
<td style="text-align:center">PC07</td>
<td style="text-align:center">PC07</td>
</tr>
<tr>
<td style="text-align:center">con12-p19</td>
<td style="text-align:center">SPI0_MOSI</td>
<td style="text-align:center">PC02</td>
</tr>
<tr>
<td style="text-align:center">con12-p20</td>
<td style="text-align:center">GND</td>
<td style="text-align:center">GND</td>
</tr>
<tr>
<td style="text-align:center">con12-p21</td>
<td style="text-align:center">SPI0_MIS0</td>
<td style="text-align:center">PC03</td>
</tr>
<tr>
<td style="text-align:center">con12-p22</td>
<td style="text-align:center">UART3_RTS</td>
<td style="text-align:center">PD25</td>
</tr>
<tr>
<td style="text-align:center">con12-p23</td>
<td style="text-align:center">SPI0_CLK</td>
<td style="text-align:center">PC00</td>
</tr>
<tr>
<td style="text-align:center">con12-p24</td>
<td style="text-align:center">SPI0_CS0</td>
<td style="text-align:center">PC05</td>
</tr>
<tr>
<td style="text-align:center">con12-p12</td>
<td style="text-align:center">GND</td>
<td style="text-align:center">GND</td>
</tr>
<tr>
<td style="text-align:center">con12-p13</td>
<td style="text-align:center">PH03</td>
<td style="text-align:center">PH03</td>
</tr>
</tbody>
</table>
<h2 id="wiringop">WiringOP</h2>
<p><a href="https://github.com/orangepi-xunlong/WiringOP">https://github.com/orangepi-xunlong/WiringOP</a></p>
<h2 id="gpio-python">GPIO-Python</h2>
<p><a href="https://opi-gpio.readthedocs.io/en/latest/">https://opi-gpio.readthedocs.io/en/latest/</a><br>
<a href="https://osi.linux-sunxi.cn/">https://osi.linux-sunxi.cn/</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[折腾的启示-相信发行版的力量]]></title>
        <id>https://derekwin.github.io/post/zhe-teng-de-qi-shi-xiang-xin-fa-xing-ban-de-li-liang/</id>
        <link href="https://derekwin.github.io/post/zhe-teng-de-qi-shi-xiang-xin-fa-xing-ban-de-li-liang/">
        </link>
        <updated>2020-03-31T03:54:01.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="orangepioneplus折腾启示">Orangepioneplus折腾启示</h3>
<h2 id="armbian真香">Armbian真香</h2>
<p>结论</p>
<ul>
<li>不推荐使用orangepi官方的给的镜像，推荐armbian的镜像</li>
<li>arm下的镜像普遍问题，无法安装对应内核headers，导致没法打热补丁，无法修复网卡等驱动</li>
<li>关于自己编译内核，制作文件系统，启动镜像，需要给虚拟机分配40g起步的空间</li>
<li>扩展boot区的思路见1.更改硬盘布局</li>
<li>开发板实现虚拟路由器，需要网卡支持全双工</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<h3 id="orangepioneplus折腾启示">Orangepioneplus折腾启示</h3>
<h2 id="armbian真香">Armbian真香</h2>
<p>结论</p>
<ul>
<li>不推荐使用orangepi官方的给的镜像，推荐armbian的镜像</li>
<li>arm下的镜像普遍问题，无法安装对应内核headers，导致没法打热补丁，无法修复网卡等驱动</li>
<li>关于自己编译内核，制作文件系统，启动镜像，需要给虚拟机分配40g起步的空间</li>
<li>扩展boot区的思路见1.更改硬盘布局</li>
<li>开发板实现虚拟路由器，需要网卡支持全双工</li>
</ul>
<!-- more -->
<h4 id="1-更改硬盘布局">1. 更改硬盘布局</h4>
<ul>
<li>
<p>扩容 -&gt; 下载空间</p>
</li>
<li>
<p>修改boot区 -&gt; 换内核<br>
https://blog.csdn.net/suolong123/article/details/100880588</p>
<pre><code>先将p2分成p2 p3 相同大小 或者不分 直接将剩下的空间扩展成3
重启
将p3格式化成ext4格式 mkfs.ext4，
查看uuid，sudo blkid，此时就可以用partuuid和uuid 此处orangepi不支持partuuid 来挂载分区了
修改 /etc/fstab
修改 /boot/cmdline.txt(树莓派)，/boot/uEnv.txt 改成03
保存boot分区到文件系统 sudo cp -r /boot ~/boot
# sudo dd if=/dev/mmcblk0p2 of=/dev/mmcblk0p3 复制分区
重启
sudo resize2fs /dev/mm..p3 不resize是1.5g，resize之后是完整空间 其实这块不resize的话，
后面可以直接复制这1.5g到前面，当然此时需要前面划分的时候给2大一点空间
，并且不resize2的空间这样直接将不完整的2前1.5g复制给3的前1.5g，
最后统一进行resize（这块用于23合并方案，设计mbr格式硬盘的拷贝）

接下来可以在window下进行分区操作 ，可视化不容易错

ubuntu中
卸载boot sudo umount /boot
sudo fdisk /dev/mm..0
p 记住开头地址
删去2 删去1 

此时注意要修改 fstab文件  将分区1的名字改成1的uuid ！！！！因为删除1导致1的LABEL出问题了

ps.其实嵌入式系统的硬盘是不常动，所以这里建议将fstab中uuid直接改成 /dev/mm..p2 硬盘的名字
ps 如果出现启动不了情况可以找ext4工具在linux下挂载ext4，修改linux的fstab就可以使用了
&lt;!--==会造成无法启动 猜测原因是23合并的时候是向前合并 文件系统受损害，
也有可能是23合并 uuid变了，所以主分区读不到了，
所以此时建议直接用分区名字来标注fstab的启动位置==--&gt;
&lt;!--新建1 500M--&gt;
&lt;!--t--&gt;
&lt;!--1--&gt;
&lt;!--c  变成 fat格式--&gt;
&lt;!--删去3--&gt;
&lt;!--新建3 把2空下的也包含进来  建成3省的修改启动文件--&gt;
故 3 不动，将12合并成boot区
此时 也可以使用此卡 在windows下给ubuntu传东西将boot区当U盘

将备份到桌面的启动文件 拷入分区1
# sudo mkfs.vfat /dev/mmcblk0p1
# sudo mount /dev/mmcblk0p1 /boot
# sudo cp ~/boot/* /boot -rf

此时你可能发现boot区大小没变
需要到windows下备份boot，将m1分区用window下磁盘工具格式化一次，重新写入boot文件，然后记得一定要改fstab中的启动项为 /dev/m..1
</code></pre>
</li>
</ul>
<h4 id="2-换内核-换到440长期稳定版本">2. 换内核 换到4.4.0长期稳定版本</h4>
<pre><code>- 确保可以下载到headers
    - apt-cache search linux-image
    - sudo apt-get install linux-image-4.4.0-snapdragon
    - sudo apt-get install linux-headers-4.4.0-snapdragon
    - 提示识别不了uuid那个硬盘 回去吧fsusb改成了/dev/mm.p3
    - 
- 此时在boot下生成对应的vmliuxz（非压缩内核镜像）而flash卡启动需要的是压缩的内核头uimage这种，故需要修改
    - https://blog.csdn.net/yafeixi/article/details/53927433
    - 本机(WSL)ubuntu : apt-get intall u-boot-tools
    - 挂载U盘 sudo mount -t drvfs L: /mnt/L
    - vmlinux与vmlinux.bin的区别 https://blog.csdn.net/weixin_34255793/article/details/92028160
    - 卡住！！！！！没法完成vmlinux到uimage
    - 所以好像除了自己编译内核别有别的办法目前
</code></pre>
<h6 id="换内核失败-进一步安装各种驱动使用">换内核失败-&gt;进一步安装各种驱动使用</h6>
<pre><code>- 尝试这么安装 headers https://kernel.ubuntu.com/~kernel-ppa/mainline/
- 两个headers文件都需要下载 https://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9.118/
- 安装过程中缺少libssl库 http://ports.ubuntu.com/pool/main/o/openssl/libssl1.1_1.1.0g-2ubuntu4_arm64.deb
- 奇迹 竟然成功了！！！！好吧应该是boot的大小影响了headers的安装
</code></pre>
<h4 id="3-安全起见-先装网卡驱动">3. 安全起见 先装网卡驱动</h4>
<ul>
<li>tenda -&gt; 8192eu -&gt; https://github.com/Mange/rtl8192eu-linux-driver</li>
<li>comfast -&gt; 8811CU -&gt; https://github.com/maxhw/rtl8821CU</li>
</ul>
<pre><code>    comfast为例
    - git clone https://github.com/maxhw/rtl8821CU.git
    = 小插曲：github加速，克隆到gitee，然后从gitee下载
</code></pre>
<h4 id="4-安装lxde桌面">4. 安装lxde桌面</h4>
<p>http://www.lijiejie.com/ubuntu-vps-config-lxde-vnc/</p>
<ul>
<li>
<p>sudo apt-get install vnc4server</p>
</li>
<li>
<p>sudo apt-get install lxde</p>
</li>
<li>
<p>vncserver :1  输入密码</p>
</li>
<li>
<p>vncserver -kill :1  kill掉 修改启动文件</p>
<pre><code>vi ~/.vnc/xstartup 
尾部追加
lxterminal &amp;
/usr/bin/lxsession -s LXDE &amp;
</code></pre>
</li>
<li>
<p>启动  vncserver -geometry 800x600</p>
</li>
<li>
<p>== 设置开机启动 ==</p>
</li>
<li>
<p>sudo vim /etc/init.d/vncserver</p>
<pre><code>#!/bin/sh
### BEGIN INIT INFO
# Provides:          vncserver
# Required-Start:    $local_fs
# Required-Stop:     $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start/stop vncserver
### END INIT INFO

# More details see:
# http://www.penguintutor.com/linux/vnc

### Customize this entry
# Set the USER variable to the name of the user to start vncserver under
export USER='pi'
### End customization required

eval cd ~$USER

case &quot;$1&quot; in
start)
# 启动命令行。此处自定义分辨率、控制台号码或其它参数。
su $USER -c '/usr/bin/vncserver -depth 16 -geometry 1024x768 :1'
echo &quot;Starting VNC server for $USER &quot;
;;
 stop)
# 终止命令行。此处控制台号码与启动一致。
su $USER -c '/usr/bin/vncserver -kill :1'
echo &quot;vncserver stopped&quot;
;;
*)
echo &quot;Usage: /etc/init.d/vncserver {start|stop}&quot;
exit 1
;;
esac
exit 0
</code></pre>
</li>
<li>
<p>sudo chmod 755 /etc/init.d/vncserver</p>
</li>
<li>
<p>sudo update-rc.d vncserver defaults</p>
</li>
<li>
<p>sudo reboot</p>
</li>
</ul>
<h3 id="new-line">NEW LINE</h3>
<pre><code>使用官方build
直接吧网卡驱动 编译进镜像
编译mainline内核
修改编译脚本，调大boot区的大小 build_image.shs

交叉编译系统环境  ubuntu18.04  60G 
</code></pre>
<h2 id="true-right-way">True Right Way</h2>
<p>Armbian kernel 5.4.X   ubuntu 18.04</p>
<ul>
<li>配置 vnc</li>
<li>区别 桌面环境 是 XFCE</li>
</ul>
<pre><code>1.首先连接上你的服务器，然后安装vncserver，命令如下
apt-get install vnc4server

2.安装图形界面 
apt-get install xfce4如果安装不上，就
apt-get update
apt-get upgrade

3.启动vncserver
首先我们先运行一下，以生成配置文件
vncserver :1   输入一个8位数的密码，VNC客户端密码
然后kill掉来修改启动文件
vncserver -kill :1

4.修改vnc的启动文件
vi ~/.vnc/xstartup 在里面将最后一行注释掉
x-window-manager &amp; 就是它。在前面加个’#’就注释掉了
然后加上我们的界面xfce的相关内容

sesion-manager &amp; xfdesktop &amp; xfce4-panel &amp;
xfce4-menu-plugin &amp;
xfsettingsd &amp;
xfconfd &amp;
xfwm4 &amp;

改完是这个样子:

#!/bin/sh

# Uncomment the following two lines for normal desktop:
# unset SESSION_MANAGER
# exec /etc/X11/xinit/xinitrc
#xrdb $HOME/.Xresources
#xsettroot -solid grey
#startxfce4&amp;

[ -x /etc/vnc/xstartup ] &amp;&amp; exec /etc/vnc/xstartup
[ -r $HOME/.Xresources ] &amp;&amp; xrdb $HOME/.Xresources
xsetroot -solid grey
vncconfig -iconic &amp;

x-terminal-emulator -geometry 80x24+10+10 -ls -title &quot;$VNCDESKTOP Desktop&quot; &amp;
#x-window-manager &amp;

sesion-manager &amp; xfdesktop &amp; xfce4-panel &amp;
xfce4-menu-plugin &amp;
xfsettingsd &amp;
xfconfd &amp;
xfwm4 &amp;

按ESC键，然后输入:wq,最后按回车键保存退出。
</code></pre>
<ul>
<li>启动无线网卡的全双工模式
<ul>
<li>配置静态ip</li>
</ul>
</li>
</ul>
<pre><code>ubuntu 联网

sudo ip link set wlan0 up

sudo iw dev wlan0 scan | grep SSID
sudo iw dev wlan0 connect name
wpa_passphrase name
# then stdin 密码
wpa_supplicant -i wlanname -c file.conf
然后报错，不能使用

上面是废话
armbian系统 直接使用 sudo armbian-config
配置网卡
</code></pre>
<p>全双工 开热点</p>
<pre><code>8811不支持全双工
8192eu需要按文档修复
很遗憾 鸡生蛋问题 没法安装headers 没法打补丁

https://github.com/oblique/create_ap.git
    sudo creat_ap -c 11 wlp9s0_ap wlp9s0 youssid yourpasswowd
</code></pre>
<p>补充</p>
<pre><code>看网卡支持的模式

iw list

有AP则有AP模式
是否支持全双工也有
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://derekwin.github.io/post/hello-gridea/</id>
        <link href="https://derekwin.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>